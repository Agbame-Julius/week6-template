AWSTemplateFormatVersion: "2010-09-09"
Description: >
  CloudFormation template for a highly available containerized web application.
  This template provisions a custom VPC spanning multiple Availability Zones and
  an Amazon RDS PostgreSQL instance with Multi-AZ failover (credentials are stored in AWS Secrets Manager)

Parameters:
  VpcCidr:
    Type: String
    Description: "CIDR block for the VPC"
    Default: "10.0.0.0/16"
  PublicSubnet1Cidr:
    Type: String
    Description: "CIDR block for Public Subnet 1"
    Default: "10.0.1.0/24"
  PublicSubnet2Cidr:
    Type: String
    Description: "CIDR block for Public Subnet 2"
    Default: "10.0.2.0/24"
  PrivateSubnet1Cidr:
    Type: String
    Description: "CIDR block for Private Subnet 1"
    Default: "10.0.3.0/24"
  PrivateSubnet2Cidr:
    Type: String
    Description: "CIDR block for Private Subnet 2"
    Default: "10.0.4.0/24"
  DBUser:
    Type: String
    Description: "The RDS database username"
    Default: "dbuser"
  DBPassword:
    Type: String
    NoEcho: true
    Description: "The RDS database password"
  DBName:
    Type: String
    Description: "The name of the RDS database"
    Default: "mydatabase"
  DBAllocatedStorage:
    Type: Number
    Description: "Allocated storage for the RDS DB instance (in GB)"
    Default: 20
  DBInstanceClass:
    Type: String
    Description: "RDS DB instance class"
    Default: "db.t3.medium"

Resources:
  ######################################
  # VPC and Networking Resources
  ######################################
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: "ProjectVPC"

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: "ProjectIGW"

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "PublicSubnet1"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "PublicSubnet2"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "PrivateSubnet1"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "PrivateSubnet2"

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: VPCGatewayAttachment
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: "ProjectNATGateway"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: "PublicRouteTable"

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref MyInternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: "PrivateRouteTable"

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NATGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  ######################################
  # RDS and Secrets Manager Resources
  ######################################
  MyDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for RDS instance"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: "MyDBSubnetGroup"

  MyRDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for RDS PostgreSQL instance"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: !Ref VpcCidr
      Tags:
        - Key: Name
          Value: "MyRDSSecurityGroup"

  DBCredentialsSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: "Project1Part2DBCredentials"
      Description: "Database credentials for the RDS PostgreSQL instance"
      SecretString: !Sub |
        {
          "username": "${DBUser}",
          "password": "${DBPassword}",
          "dbname": "${DBName}"
        }
      Tags:
        - Key: Environment
          Value: Production

  MyDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: postgres
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: !Ref DBAllocatedStorage
      MultiAZ: true
      PubliclyAccessible: false
      VPCSecurityGroups:
        - !Ref MyRDSSecurityGroup
      DBSubnetGroupName: !Ref MyDBSubnetGroup
      MasterUsername: "{{resolve:secretsmanager:Project1Part2DBCredentials:SecretString:username}}"
      MasterUserPassword: "{{resolve:secretsmanager:Project1Part2DBCredentials:SecretString:password}}"
      DBName: !Ref DBName
      BackupRetentionPeriod: 7
      StorageEncrypted: true



Outputs:
  VPCId:
    Description: "The VPC ID"
    Value: !Ref MyVPC
  RDSInstanceEndpoint:
    Description: "RDS Endpoint"
    Value: !GetAtt MyDBInstance.Endpoint.Address
 
